Respostas da lista:

1) Qual a utilidade do aprendizado do uso de ponteiro para aplicações em engenharia?

A utilidade do conhecimento de ponteiros se dá devido a necessidade da alocação de memória em códigos um pouco mais avançados
onde tem-se por objetivo atividades ao qual exigem mais dos endereços ao qual o programa trabalha como troca, referenciação e etc. 
A importância é notória, pois com a utilização do ponteiro é possível evitar que alguns erros relacionados a conflitos de memória
ocorram em um programa (ao qual representam uma boa parte dos erros em códigos) e também na fluídez do código, ao qual sabe-se onde
os elementos estão alocados, sendo engenharia uma disciplina ao qual programação é essencial em alguns ramos, mostra-se a importância 
de compreender a sua aplicação. 



2) Seja o seguinte trecho de programa:

//*
int i=3,j=5;
int *p, *q;
p = &i;
q = &j;
*//

Determine o valor das seguintes expressões:

p == &i; // = 1 

*p - *q;    // -2 

**&p;   //  3 

3 - *p/(*q) + 7;    // 10     (entretanto, se expecificar as casas decimais será 9,4.  



 
 
3) Mostre o que será impresso por programa supondo que i ocupa o endereço 4094 na memória.

main(){
  int i=5, *p;
  p = &i;
  printf("%x %d %d %d %d", p,*p+2,**&p,3**p,**&p+4);
} 

RESPOSTA: 0x28ff44, 7, 5. 15 e 9 





4 ) Se i e j são variáveis inteiras e p e q ponteiros para int, quais das seguintes expressões de atribuição são ilegais?

a. p = &i;         // CORRETA 
b. *q = &j;        // ERRADA
c. p = &*&i;       // CORRETA
d. i = (*&)j;      // ERRADA
e. i = *&j;        // CORRETA
f. i = &&j;        // ERRADA
g. q = *p;         // ERRADA
h. i = (*p)` + *q; // CORRETA





5) Determine o que será mostrado pelo seguinte programa (compile-o, execute-o e verifique se foram obtidas as respostas esperadas).


NO CÓDIGO HAVIA UMA PARTE AO QUAL DEU ERRO, ONDE ENCONTRAVA-SE  ---  p5'; ---, AS ASPA SEGUINTE AO p5 GERAVA ERRO, LOGO EU OPTEI POR ALTERAR PARA
" p5++; " fazendo com que o valor final fosse distinto. 

SAÍDA:
20 
29.0 
P 
e 
P 
e 
t 
31 
45 
27 
31 
45 
27





6) Determine o que será mostrado pelo seguinte programa (compile-o, execute-o e verifique se
foram obtidas as respostas esperadas). 


(AS ÚNICAS MUDANÇAS NO CÓDIGO FORAM ESPAÇOS NA PARTE DO "printf()" PARA QUE A VISUALIZAÇÃO FOSSE MAIS FÁCIL.) 


SAÍDA:
contador/valor/valor/endereco/endereco
i = 0 vet[0] = 1.1 *(f + 0) = 1.1 &vet[0] = E830E430 (f + 0) = E830E430 
i = 1 vet[1] = 2.2 *(f + 1) = 2.2 &vet[1] = E830E434 (f + 1) = E830E434 
i = 2 vet[2] = 3.3 *(f + 2) = 3.3 &vet[2] = E830E438 (f + 2) = E830E438 
i = 3 vet[3] = 4.4 *(f + 3) = 4.4 &vet[3] = E830E43C (f + 3) = E830E43C 
i = 4 vet[4] = 5.5 *(f + 4) = 5.5 &vet[4] = E830E440 (f + 4) = E830E440 

A saída seguiu o esperado, se eu fosse pensar em mudar alguma coisa, seria talvez alterar "i=0" para "i=1", assim o array ficaria igual ao que foi 
entregue no código (vet[5]).






7) Assumindo que pulo[] é um vetor do tipo int, quais das seguintes expressões referenciam o
valor do terceiro elemento do vetor?


#include <iostream>
using namespace std;

int main() {
int x[10];
int *px, i;
px = x;
for( i = 0; i < 10; i++){
  x[i] = i+1;
}
for( i = 0; i < 10; i++){
  cout << x[i] << ", ";
}
cout << "\n\n";

cout << &x    << "   " << px << "   " << *(px+0) << endl;
cout << &x[0] << "   " << px+1 << "   " << *(px+1)<< endl;
cout << &x[1] << "   " << px+2 << "   " << *(px+2)<<endl;
cout << &x[2] << "   " << px+3 << "   " << *(px+3) <<endl;
cout << &x[3] << "   " << px+4 << "   " << *(px+4)<<endl;
return 0;
}

SAÍDA: 
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 

0x7fffa1bc64c0   0x7fffa1bc64c0   1
0x7fffa1bc64c0   0x7fffa1bc64c4   2
0x7fffa1bc64c4   0x7fffa1bc64c8   3
0x7fffa1bc64c8   0x7fffa1bc64cc   4
0x7fffa1bc64cc   0x7fffa1bc64d0   5


COMO É POSSÍVEL PERCEBER, EM &x[2], ao qual é o terceiro elemento, ondereço é equivalente ao de px + 2, ao que quer dizer que há uma equivalencia entre ambos, logo

RESPOSTA: Pulo + 2;








8) Considerando a declaração:

int mat[4], *p, x;

quais das seguintes expressões são válidas? Justifique.

 p = mat + 1;     VÁLIDA (ponteiro p recebe o array de mat+1, logo, indica que p recebe o endereço de mat +1 inteiro, logo, 4 bytes a frente
 p = mat++;         INVALIDA (p está recebendo o endereço do array mat[4], logo não se acrescenta valor interio ++)
 p =++mat;         INVÁLIDA (mesma razão do anterior ) 
 x = (*mat)++;      VÁLIDA  
 
 
 
 
 
 
 9) O que fazem os seguintes programas em C?
 
 int main(){
  int vet[] = {4,9,13};
  int i;
  for(i=0;i<3;i++){
  printf("%d ",*(vet+i));
  }
}
int main(){
  int vet[] = {4,9,13};
  int i;
  for(i=0;i<3;i++){
  printf("%X ",vet+i);
  }
}
 
 RESPOSTA: OS DOIS PROGRAMAS SÃO DIFERENTES POIS O PRIMEIRO IMPRIME OS ELEMENTOS DE VET[] NA SAÍDA, ENQUANTO O ÚLTIMO IMPRIME OS ENDEREÇOS DOS ELEMENTOS. 
 
 
 
 
 
 
 10) Seja x um vetor de 4 elementos, declarado da forma TIPO x[4]. Suponha que depois da
declaração, x esteja armazenado no endereço de memória 4092 (ou seja, o endereço de x[0]).
Suponha também que na máquina seja usada uma variável do tipo char ocupa 1 byte, do tipo
int ocupa 2 bytes, do tipo float ocupa 4 bytes e do tipo double ocupa 8 bytes. Quais serão os
valores de x+1, x+2 e x+3 se:
 
 A ))))) Se x for declarado como Char: teremos &x = 4092
 se (x+1) = 4093 ; se (x+2) = 4094; e se x+3 = 4095 
 
 B ))))) Se x[4] for declarado como int: teremos &x = 4092
 se (x+1) = 4094 ; se (x+2) = 4096; e se x+3 = 4098 
 
 C ))))) Se x[4] for declarado como float: teremos &x = 4092
 se (x+1) = 4096 ; se (x+2) = 4100; e se x+3 = 4104 
 
 D ))))) Se x[4] for declarado como double: teremos &x = 4092
 se (x+1) = 4100 ; se (x+2) = 4108; e se x+3 = 4116 
 

Implemente um programa de computador para testar estas suposições e compare as respostas
oferecidas pelo programa com as respostas que você idealizou.


CÓDIGO em C++: 
 
 #include <iostream>
using namespace std;

int main() {
char x[4];
char *x1;
x1 = x;
cout << "Endereço de char: "<< &x << "  " << &x[1] << " " << &x[2]<< endl;
int y[4];
int *x2;
x2 = y;
cout << "Endereço de int: "<< &y << endl;
float z[4];
float *x3;
x3 = z;
cout << "Endereço de float: "<< &z << endl;
double w[4];
double *x4;
x4 = w;
cout << "Endereço de double: "<< &w << endl;

cout << x1 << " " << (x1 + 1) << " " << (x1 + 2) << " " << (x1 + 3)<< endl; 
cout << x2 << " " << (x2 + 1) << " " << (x2 + 2) << " " << (x2 + 3)<< endl; 
cout << x3 << " " << (x3 + 1) << " " << (x3 + 2) << " " << (x3 + 3)<< endl; 
cout << x4 << " " << (x4 + 1) << " " << (x4 + 2) << " " << (x4 + 3)<< endl; 

return 0;
}


SAÍDA: 

Endereço de char: 0x7ffcbdeea858   
Endereço de int: 0x7ffcbdeea840
Endereço de float: 0x7ffcbdeea820
Endereço de double: 0x7ffcbdeea7f0
   
0x7ffcbdeea840 0x7ffcbdeea844 0x7ffcbdeea848 0x7ffcbdeea84c   // AUMENTA DE 4 EM 4 BYTES
0x7ffcbdeea820 0x7ffcbdeea824 0x7ffcbdeea828 0x7ffcbdeea82c   // AUMENTA DE 4 EM 4 BYTES 
0x7ffcbdeea7f0 0x7ffcbdeea7f8 0x7ffcbdeea800 0x7ffcbdeea808   // AUMENTA DE 8 EM 8 BYTES  
 

CÓDIGO EM C: 

#include <stdio.h>
#include <stdlib.h>

 int main(void){
  unsigned vet[4];
  char *y;
    y = vet;
  int *x;
    x = vet;
  float *z;
    z = vet;
  double *w;
    w = vet;
  printf("Endereço = %x %x %x %x\n", y, y+1, y+2, y+3);
  printf("Endereço = %x %x %x %x\n", x, x+1, x+2, x+3);
  printf("Endereço = %x %x %x %x\n", z, z+1, z+2, z+3);
  printf("Endereço = %x %x %x %x\n", w, w+1, w+2, w+3);
  return 0;
}

SAÍDA: 

Endereço = 52edf260 52edf261 52edf262 52edf263
Endereço = 52edf260 52edf264 52edf268 52edf26c
Endereço = 52edf260 52edf264 52edf268 52edf26c
Endereço = 52edf260 52edf268 52edf270 52edf278


NESSE CASO, ONDE DEFINIU-SE UM UNSIGNED ARRAY, FOI POSSÍVEL ASSOCIAR TODAS AS VARIÁVEIS AO MESMO E ACOMPANHAR A DIFERENÇA ENTRE O ENDEREÇOS 
E O 'CHAR' NÃO FOI OMITIDO, ONDE PERCEBE-SE QUE: 

Assim como na questão, o char aumenta de 1 em 1 bytes
Diferente da questão, o int aumenta de 4 em 4 bytes 
Assim como na questão, o float aumenta de 4 em 4 bytes 
Assim como na questão, o double aumenta de 8 em 8 bytes 




11 ) Suponha que as seguintes declarações tenham sido realizadas:

Identifique quais dos seguintes comandos é válido ou inválido:

a. aloha[2] = value;          //  VÁLIDO
b. scanf("%f", &aloha);       //  VÁLIDO (Compila, mas exige a o número de arrays, exemplo 'aloha[10]')
c. aloha = "value";           //  INVALIDO (aloha é tipo float, enquanto "value" é uma variável char)
d. printf("%f", aloha);       //  VÁLIDO (compila, mas exige o número específico do array, exemplo: aloha[2])  
e. coisas[4][4] = aloha[3];   //  VÁLIDO 
f. coisas[5] = aloha;         //  INVALIDO (tipos incompatíveis)
g. pf = value;                //  INVALIDO (incomatibilidade entre as variáveis) 
h. pf = aloha;                //  VÁLIDO (recebe o endereço inicial do array) 
 





12) O que é um ponteiro para uma função? Pesquise na Internet referências sobre o assunto e
escreva um pequeno programa exemplificando o uso deste recurso.


R: Um ponteiro para uma função serve para definir em tempo de execução, quais funções serão executadas, sem a
necessidade de reescrever o nome da função. Funciona semelhante as variaeis, onde os ponteiros que apontam para
as funções iram aponta para funções que tem a mesma sequência lógica. 

TIPO: 

tipo_de_retorno (*nome_do_ponteiro)(); 
ou
tipo_de_retorno (*nome_do_ponteiro) (declaração_de_parâmetros);


CÓDIGO: 

#include <stdio.h>

int xp (int a){
  return a*a;
}

int main()
{
int (*ptr) (int);
ptr = xp;
printf("%d", ptr(10));
}

Nesse código, temos um exemplo de função com parâmetros, onde defini-se que recebe-se um inteiro e retorna-se o quadrado do 
inteiro na função, e o ponteiro para a função segue a mesma lógica. 










13) Implemente em linguagem C uma função em um programa de computador que leia n valores do tipo float e os
apresente em ordem crescente. Utilize alocação dinâmica de memória para realizar a tarefa.












14. Reimplemente o programa da questão anterior utilizando a função qsort() do C. Comente o seu
código, explicando o que faz cada uma das linhas.














15. Utilize a ideia do ponteiro para função pela função qsort() para implementar sua própria função
de ordenação. Para isso, sua função deverá receber, entre outros argumentos, um ponteiro para
a função de comparação.











16. Procure na internet mecanismos que possibilitem medir tempos de execução de rotinas
computacionais. Geralmente, estas medidas são realizadas com o auxílio de funções em C que
lêem a hora no sistema (sistemas Unix e Windows geralmente usam funções diferentes).
Utilizando os conhecimentos que você obteve com sua pesquisa, meça os tempos de execução
das implementações que você criou para os dois problemas de ordenação anteriores e compare
os resultados obtidos.














17. Escreva uma função em c que escreva em um vetor a soma dos elementos correspondentes de
outros dois vetores (os tamanhos dos vetores devem ser fornecidos pelo usuário). Por exemplo,
se o primeiro vetor contiver os elementos 1, 3, 0 e -2, e o segundo vetor contiver os elementos 3,
5, -3 e 1, o vetor de soma terá valores resultantes iguais a 4, 8, -3 e -1. A função deve receber 4
argumentos: os nomes dos três vetores e o número de elementos presentes em cada vetor.

o PRIMEIRO CÓDIGO É O QUE EU ACHO QUE FOI SOLICITADO, O SEGUNDO FOI O QUE EU TINHA ACHADO 
QUE ERA PARA SER FEITO ANTES E DECIDI SÓ MANTER. 

#include <stdio.h>

int vetor(int vetx[4], int vety[4]){
  int i;
  int vet[i];
  for ( i = 0; i < 4; i++){
    vet[i] = vetx[i]+vety[i];
    printf(" %d ",vet[i]);
  }
return 0;
}

int main (){
int vector[4], veta[4], vetb[4];
char nome[20];
printf("Nome do vetor 1: ");
scanf("%s", nome);
printf ("\nvalores: ");
for (int z = 0; z < 4; z++){
  scanf("%d", &veta[z]);
}
printf("\nNome do vetor 2: ");
scanf("%s", nome);
printf ("\nvalores: ");
for (int x = 0; x < 4; x++){
  scanf("%d", &vetb[x]);
}
printf("\nNome do vetor soma: ");
scanf("%s", nome);
printf("\n\n%i", vetor(veta, vetb));

return 0;
}

SAÍDA: 


Nome do vetor 1: velocidade 

valores: 5 10 12 8

Nome do vetor 2: aceleraçao

valores: 15 7 12 3

Nome do vetor soma: velociraptor
 20  17  24  11 
 
 

#include <stdio.h>

int vetor(int vet[4]){
  int i;
  int vetx[4] = {3, 4, 2, 7}; 
  int vety[4] = {2, -2, 5, 2};
  for ( i = 0; i < 4; i++){
    vet[i] = vetx[i]+vety[i];
    printf(" %d ",vet[i]);
  }
return 0;
}

int main (){
int vector[4];
printf("Vetor soma dos vetores x e y: ");
printf("\n\n%i", vetor(vector));

}

SAÍDA: 
Vetor soma dos vetores x e y:  5  2  7  9 

0;








18. Crie uma função capaz de realizar multiplicação matricial da forma C=A B. A função deve
receber 6 argumentos: os ponteiros para as matrizes A, B e C, o número de linhas e colunas de A
e o número de colunas de B (assuma que o número de coluna de A é igual ao número de linhas
de B). O resultado da multiplicação deve ficar armazenado em C. Crie um programa para testar
sua implementação, capaz de utilizar a função de multiplicação e imprimir as três matrizes. A
função criada para multiplicação não deve realizar nenhum tipo de saída de dados no terminal.














19. Pesquise na Internet sobre o uso da biblioteca libGC, que implementa um coletor de lixo em C. O
processo de instalação dessa biblioteca em sistemas Windows pode ser um pouco trabalhoso.
Entretanto, em sistemas Unix, a instalação é bem simples, de sorte que se recomenda a
resolução desta questão em uma máquina, por exemplo, com Linux instalado. Caso seja usuário
Windows e não queira instalar sistemas alternativos em seu computador, use uma ferramenta
de virtualização (ex: VirtualBox) para instalar e executar o Linux sem alterar a instalação
original de seu computador. Prepare um pequeno programa-exemplo demonstrando como usar
a biblioteca.




R: As bibliotecas, são no geral uma coleção de subprogramas que apoiam o desenvolvimento de 
softwares, assim sendo, há um conjunto de códigos e porgramas auxiliares com o objetivo de servir
a programas independentes. O glibc ou GNU C Library e é o core das biblioteca do Linux, é uma biblioteca 
de run time, que trabalha então, com tempo de execução de programas em um computador .

(Eu não consegui intalar o linux, o meu aparelho é um chromebook, e até mesmo recentemente 
houve uma atualização que permite, salvo engano, que o chromebook possa alterar para uma versão 
do linux, mas o meu não foi contemplado, acho que porque é uma das primeiras versões, por isso não 
consegui instalar. )









20. Com base no programa-exemplo da questão anterior, proponha uma aplicação que permita
comparar o desempenho das funções tradicionais de alocação/liberação de memória da
linguagem c (malloc/free) com as funções de gerenciamento de memória da biblioteca que você
escolheu. A aplicação deverá ser capaz de ressaltar possíveis atrasos de tempo provenientes do
coletor de lixo utilizado.




R: IMPOSSIBILITADO 

















